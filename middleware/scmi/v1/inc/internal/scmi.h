/*
 * MTK Tinysys Software
 *
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Description:
 *      SCMI base protocol definitions.
 */
/* MediaTek Inc. (C) 2021. All rights reserved.
 *
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
 * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
 * AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
 * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
 * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
 * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
 * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
 * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
 * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
 * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
 * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
 * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
 * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
 * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 */

#ifndef _SCMI_H_
#define _SCMI_H_

#include <string.h>
#include <stdio.h>

/*MTK support the maxmun message length is:
    size of scmi_msg_t + max length of protocol of {Base, Tinysys}*/
#define SCMI_MESSAGE_LENGTH_MAX 56

/*Always raise slot[0] to trigger respone irq */
#define SCMI_CHANNEL_SLOT_IDX   0

#define SCMI_PLATFORM_ID 0
#define SCMI_AGENT_ID_MAX 0xFF
#define SCMI_PROTOCOL_ID_MAX 0xFF
#define SCMI_PLATFORM_PROTOCOL_ID_MIN 0x80
#define SCMI_PLATFORM_PROTOCOL_ID_MAX SCMI_PROTOCOL_ID_MAX

#define SCMI_MESSAGE_HEADER_MESSAGE_ID_POS    0
#define SCMI_MESSAGE_HEADER_MESSAGE_TYPE_POS  8
#define SCMI_MESSAGE_HEADER_PROTOCOL_ID_POS  10
#define SCMI_MESSAGE_HEADER_TOKEN_POS        18

#define SCMI_MESSAGE_HEADER_MESSAGE_ID_MASK \
    (UINT32_C(0xFF) << SCMI_MESSAGE_HEADER_MESSAGE_ID_POS)
#define SCMI_MESSAGE_HEADER_MESSAGE_TYPE_MASK \
    (UINT32_C(0x3) << SCMI_MESSAGE_HEADER_MESSAGE_TYPE_POS)
#define SCMI_MESSAGE_HEADER_PROTOCOL_ID_MASK \
    (UINT32_C(0xFF)  << SCMI_MESSAGE_HEADER_PROTOCOL_ID_POS)
#define SCMI_MESSAGE_HEADER_TOKEN_MASK  \
    (UINT32_C(0x3FF) << SCMI_MESSAGE_HEADER_TOKEN_POS)

#if 0
struct scmi_msg_t {
    uint32_t status_free:1;
    uint32_t status_error:1;
    uint32_t status_resv:2;
    uint32_t flag_ie:1;
    uint32_t flag_resv:3;
    uint32_t length:16; /* message_header + payload, max 65535 */
    uint32_t message_header;
    uint32_t payload[];
};

#define SCMI_MSG_STATUS_FREE_POS 31
#define SCMI_MSG_STATUS_FREE_MASK \
    (UINT32_C(0x1) << SCMI_MSG_STATUS_FREE_POS)

#define SCMI_MSG_STATUS_ERROR_POS 30
#define SCMI_MSG_STATUS_ERROR_MASK \
    (UINT32_C(0x1) << SCMI_MSG_STATUS_ERROR_POS)

#define SCMI_MSG_FLAGS_IENABLED_POS 27
#define SCMI_MSG_FLAGS_IENABLED_MASK \
    (UINT32_C(0x1) << SCMI_MSG_FLAGS_IENABLED_POS)
#else
struct scmi_msg_t {
    uint32_t reserved0;
    uint32_t status;
    uint64_t reserved1;
    uint32_t flags;
    uint32_t length; /* message_header + payload */
    uint32_t message_header;
    uint32_t payload[];
};

#define SCMI_MEM_STATUS_FREE_POS 0
#define SCMI_MEM_STATUS_FREE_MASK \
    (UINT32_C(0x1) << SCMI_MEM_STATUS_FREE_POS)

#define SCMI_MEM_STATUS_ERROR_POS 1
#define SCMI_MEM_STATUS_ERROR_MASK \
    (UINT32_C(0x1) << SCMI_MEM_STATUS_ERROR_POS)

#define SCMI_MEM_FLAGS_IENABLED_POS 0
#define SCMI_MEM_FLAGS_IENABLED_MASK \
    (UINT32_C(0x1) << SCMI_MEM_FLAGS_IENABLED_POS)
#endif

#endif /* _SCMI_H_ */
